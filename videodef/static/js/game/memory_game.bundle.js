/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./memory_game/index.js":
/*!******************************!*\
  !*** ./memory_game/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMemoryGameOnBoard: () => (/* binding */ createMemoryGameOnBoard),\n/* harmony export */   createMemoryGameSeparately: () => (/* binding */ createMemoryGameSeparately),\n/* harmony export */   setupWhiteboardMemoryGame: () => (/* binding */ setupWhiteboardMemoryGame)\n/* harmony export */ });\n/* harmony import */ var _memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memory-game-logic.js */ \"./memory_game/memory-game-logic.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n/**\r\n * Конвертирует строку Data URL в объект Blob.\r\n * Необходимо для отправки пользовательских изображений на сервер через FormData.\r\n * @param {string} dataURL - Строка Data URL\r\n * @returns {Blob|null} - Объект Blob или null в случае ошибки.\r\n */\nfunction dataURLtoBlob(dataURL) {\n  try {\n    // Разделяем строку на метаданные (MIME-тип) и данные Base64\n    var parts = dataURL.split(';base64,');\n    var contentType = parts[0].split(':')[1];\n    // Декодируем Base64 строку в бинарную строку\n    var raw = window.atob(parts[1]);\n    var rawLength = raw.length;\n    // Создаем массив 8-битных беззнаковых целых чисел\n    var uInt8Array = new Uint8Array(rawLength);\n    for (var i = 0; i < rawLength; ++i) {\n      uInt8Array[i] = raw.charCodeAt(i);\n    }\n    // Создаем и возвращаем Blob с указанным MIME-типом\n    return new Blob([uInt8Array], {\n      type: contentType\n    });\n  } catch (error) {\n    console.error(\"Ошибка конвертации Data URL в Blob:\", error);\n    return null;\n  }\n}\n\n/**\r\n * Отображает список сохраненных игр \"Поиск пар\".\r\n * @param {HTMLElement} container - DOM-элемент для списка.\r\n * @param {Array<object>} games - Массив объектов игр с сервера.\r\n */\nfunction displayMemoryGameList(container, games) {\n  if (!games || games.length === 0) {\n    container.innerHTML = '<p>У вас пока нет сохраненных игр этого типа.</p>';\n    return;\n  }\n  var ul = document.createElement('ul');\n  games.forEach(function (game) {\n    var li = document.createElement('li');\n    var imageInfo = game.preset_name ? \"(\\u043D\\u0430\\u0431\\u043E\\u0440: \".concat(game.preset_name, \")\") : \"(свои фото)\";\n    li.textContent = \"\".concat(game.name, \" (\").concat(game.pair_count, \" \\u043F\\u0430\\u0440) \").concat(imageInfo);\n    li.dataset.gameData = JSON.stringify(game);\n    li.dataset.id = game.id;\n    ul.appendChild(li);\n  });\n  container.innerHTML = '';\n  container.appendChild(ul);\n}\n\n/**\r\n * Инициализирует общую логику сохранения и загрузки.\r\n * @param {function} getGameState - Функция, возвращающая объект состояния игры для сохранения.\r\n * @param {function} applyLoadedState - Функция, применяющая загруженное состояние.\r\n * @param {object} controls - Объект с DOM-элементами управления.\r\n * @param {string} gameIdPrefix - Префикс URL для API.\r\n */\nfunction initSaveLoadFeatures(getGameState, applyLoadedState, controls, gameIdPrefix) {\n  var saveButton = controls.saveButton,\n    loadButton = controls.loadButton,\n    loadModal = controls.loadModal,\n    loadListContainer = controls.loadListContainer,\n    loadConfirmBtn = controls.loadConfirmBtn,\n    loadCancelBtn = controls.loadCancelBtn;\n  if (!saveButton || !loadButton || !loadModal || !loadListContainer || !loadConfirmBtn || !loadCancelBtn) {\n    console.warn(\"Элементы для сохранения/загрузки не найдены.\");\n    return;\n  }\n  var selectedGameToLoad = null;\n\n  // --- Функции-обработчики ---\n  var saveHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var gameState, formData, key, value, gameId, url, method, response, result, finalGameState;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (isAuthenticated) {\n              _context.next = 4;\n              break;\n            }\n            alert(\"Для сохранения игры необходимо войти в аккаунт.\");\n            window.location.href = loginUrl;\n            return _context.abrupt(\"return\");\n          case 4:\n            gameState = getGameState();\n            if (gameState) {\n              _context.next = 7;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 7:\n            formData = new FormData();\n            for (key in gameState) {\n              if (gameState.hasOwnProperty(key)) {\n                if (key === 'customImages') {\n                  gameState[key].forEach(function (file) {\n                    return formData.append('customImages[]', file, file.name);\n                  });\n                } else if (gameState[key] !== null && gameState[key] !== undefined) {\n                  value = _typeof(gameState[key]) === 'object' ? JSON.stringify(gameState[key]) : gameState[key];\n                  formData.append(key, value);\n                }\n              }\n            }\n            gameId = gameState.id;\n            url = gameId ? updateMemoryGameBaseUrl.replace('0', gameId) : saveMemoryGameUrl;\n            method = gameId ? 'PUT' : 'POST';\n            saveButton.textContent = 'Сохранение...';\n            saveButton.disabled = true;\n            _context.prev = 14;\n            _context.next = 17;\n            return fetch(url, {\n              method: method,\n              headers: {\n                'X-CSRFToken': csrfToken\n              },\n              body: formData\n            });\n          case 17:\n            response = _context.sent;\n            _context.next = 20;\n            return response.json();\n          case 20:\n            result = _context.sent;\n            if (response.ok) {\n              _context.next = 23;\n              break;\n            }\n            throw new Error(result.message || \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \".concat(response.status));\n          case 23:\n            alert(result.message || 'Успех!');\n            if (response.ok) {\n              applyLoadedState({\n                id: result.id || gameId\n              }, false);\n            }\n            _context.next = 31;\n            break;\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](14);\n            console.error(\"Ошибка при сохранении:\", _context.t0);\n            alert(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u0438: \".concat(_context.t0.message));\n          case 31:\n            _context.prev = 31;\n            finalGameState = getGameState(true);\n            saveButton.textContent = finalGameState && finalGameState.id ? 'Обновить' : 'Сохранить';\n            saveButton.disabled = false;\n            return _context.finish(31);\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[14, 27, 31, 36]]);\n    }));\n    return function saveHandler() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var loadHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var response, result;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof isAuthenticated === 'undefined' || !isAuthenticated)) {\n              _context2.next = 4;\n              break;\n            }\n            alert(\"Для загрузки игры необходимо войти в аккаунт.\");\n            window.location.href = loginUrl;\n            return _context2.abrupt(\"return\");\n          case 4:\n            loadListContainer.innerHTML = '<p>Загрузка...</p>';\n            loadConfirmBtn.disabled = true;\n            selectedGameToLoad = null;\n            loadModal.style.display = 'flex';\n            _context2.prev = 8;\n            _context2.next = 11;\n            return fetch(loadMemoryGamesUrl);\n          case 11:\n            response = _context2.sent;\n            _context2.next = 14;\n            return response.json();\n          case 14:\n            result = _context2.sent;\n            if (result.status === 'success') {\n              if (gameIdPrefix === 'memory_game') displayMemoryGameList(loadListContainer, result.games);\n            } else {\n              loadListContainer.innerHTML = \"<p>\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(result.message || 'Не удалось загрузить.', \"</p>\");\n            }\n            _context2.next = 22;\n            break;\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](8);\n            console.error(\"Сетевая ошибка при загрузке:\", _context2.t0);\n            loadListContainer.innerHTML = '<p>Сетевая ошибка.</p>';\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[8, 18]]);\n    }));\n    return function loadHandler() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var listClickHandler = function listClickHandler(event) {\n    var target = event.target.closest('li');\n    if (target) {\n      loadListContainer.querySelectorAll('li').forEach(function (item) {\n        return item.classList.remove('selected');\n      });\n      target.classList.add('selected');\n      selectedGameToLoad = JSON.parse(target.dataset.gameData);\n      loadConfirmBtn.disabled = false;\n    }\n  };\n  var confirmHandler = function confirmHandler() {\n    if (selectedGameToLoad) {\n      applyLoadedState(selectedGameToLoad, true);\n      loadModal.style.display = 'none';\n    }\n  };\n  var cancelHandler = function cancelHandler() {\n    loadModal.style.display = 'none';\n  };\n\n  // --- Прямое назначение обработчиков с предварительной очисткой ---\n  saveButton.removeEventListener('click', saveButton.clickHandler);\n  saveButton.addEventListener('click', saveHandler);\n  saveButton.clickHandler = saveHandler;\n  loadButton.removeEventListener('click', loadButton.clickHandler);\n  loadButton.addEventListener('click', loadHandler);\n  loadButton.clickHandler = loadHandler;\n  loadListContainer.removeEventListener('click', loadListContainer.clickHandler);\n  loadListContainer.addEventListener('click', listClickHandler);\n  loadListContainer.clickHandler = listClickHandler;\n  loadConfirmBtn.removeEventListener('click', loadConfirmBtn.clickHandler);\n  loadConfirmBtn.addEventListener('click', confirmHandler);\n  loadConfirmBtn.clickHandler = confirmHandler;\n  loadCancelBtn.removeEventListener('click', loadCancelBtn.clickHandler);\n  loadCancelBtn.addEventListener('click', cancelHandler);\n  loadCancelBtn.clickHandler = cancelHandler;\n}\n\n/**\r\n * Инициализирует интерфейс и логику для отдельной страницы игры \"Поиск пар\".\r\n */\nfunction createMemoryGameSeparately() {\n  var gameWrapper = document.getElementById('memory-game-wrapper');\n  var settingsPanel = document.querySelector('.game-settings-panel');\n  var startButton = settingsPanel === null || settingsPanel === void 0 ? void 0 : settingsPanel.querySelector('#start-memory-game');\n  if (!gameWrapper || !settingsPanel || !startButton) {\n    console.error(\"Не найдены основные элементы для отдельной страницы игры 'Поиск пар'.\");\n    return;\n  }\n  var localGameParams = (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.getGameParts)();\n  var saveButton = document.getElementById('save-memory-game-btn');\n  var loadButton = document.getElementById('load-memory-game-btn');\n  var loadModal = document.getElementById('load-game-modal');\n  var loadListContainer = document.getElementById('load-list-container');\n  var loadConfirmBtn = document.getElementById('load-confirm-btn');\n  var loadCancelBtn = document.getElementById('load-cancel-btn');\n  var handleSettingsChange = function handleSettingsChange() {\n    localGameParams.id = null;\n    localGameParams.card_layout = [];\n    if (saveButton) saveButton.textContent = 'Сохранить';\n    gameWrapper.innerHTML = '<p class=\"initial-message\">Настройки изменены. Нажмите \"Начать игру\".</p>';\n  };\n  setupGameControls(settingsPanel, localGameParams, handleSettingsChange);\n  startButton.onclick = function () {\n    var useExistingLayout = !!(localGameParams.id && localGameParams.card_layout && localGameParams.card_layout.length > 0);\n    (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.initializeBoard)(gameWrapper, localGameParams, useExistingLayout);\n  };\n  var getGameState = function getGameState() {\n    var skipAlerts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var gameNameInput = settingsPanel.querySelector('#game-name');\n    localGameParams.name = gameNameInput.value.trim();\n    if (!skipAlerts && !localGameParams.name) {\n      alert(\"Введите название для сохранения.\");\n      return null;\n    }\n    if (!skipAlerts && (!localGameParams.card_layout || localGameParams.card_layout.length === 0)) {\n      alert(\"Сначала начните игру.\");\n      return null;\n    }\n    var gameState = {\n      id: localGameParams.id,\n      name: localGameParams.name,\n      pairCount: localGameParams.pairCount,\n      cardLayout: localGameParams.card_layout\n    };\n    if (localGameParams.isCustomSet) {\n      var _localGameParams$cust;\n      if ((_localGameParams$cust = localGameParams.customImageObjects) !== null && _localGameParams$cust !== void 0 && _localGameParams$cust.some(function (obj) {\n        return obj.file;\n      })) {\n        if (!skipAlerts && localGameParams.customImageObjects.length < localGameParams.pairCount) {\n          alert(\"Недостаточно изображений для сохранения.\");\n          return null;\n        }\n        gameState.customImages = localGameParams.customImageObjects.slice(0, localGameParams.pairCount).map(function (imgObj) {\n          return imgObj.file;\n        }).filter(Boolean);\n      }\n    } else {\n      var presetName = findPresetNameByUrl(localGameParams.selectedImageSet[0]);\n      if (presetName) {\n        gameState.presetName = presetName;\n      } else if (!skipAlerts) {\n        alert(\"Не удалось определить имя пресета.\");\n        return null;\n      }\n    }\n    return gameState;\n  };\n  var applyLoadedState = function applyLoadedState(loadedData) {\n    var showStartMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var isUpdateConfirmation = Object.keys(loadedData).length === 1 && loadedData.id && !showStartMessage;\n    if (isUpdateConfirmation) {\n      localGameParams.id = loadedData.id;\n      return;\n    }\n    var mappedLoadedData = _objectSpread(_objectSpread({}, loadedData), {}, {\n      pairCount: loadedData.pair_count\n    });\n    delete mappedLoadedData.pair_count;\n    Object.assign(localGameParams, mappedLoadedData);\n    localGameParams.isCustomSet = !!loadedData.custom_image_urls;\n    if (localGameParams.isCustomSet) {\n      localGameParams.selectedImageSet = loadedData.custom_image_urls;\n      localGameParams.customImageObjects = loadedData.custom_image_urls.map(function (url) {\n        return {\n          url: url,\n          file: null\n        };\n      });\n    } else {\n      localGameParams.selectedImageSet = (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.getFullPresetImageUrls)(loadedData.preset_name);\n      localGameParams.customImageObjects = [];\n    }\n    setupGameControls(settingsPanel, localGameParams, handleSettingsChange);\n    if (saveButton) saveButton.textContent = 'Обновить';\n    if (showStartMessage) {\n      alert(\"\\u0418\\u0433\\u0440\\u0430 \\\"\".concat(localGameParams.name, \"\\\" \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u0430. \\u041D\\u0430\\u0436\\u043C\\u0438\\u0442\\u0435 \\\"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\\\" \\u0434\\u043B\\u044F \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0430.\"));\n      gameWrapper.innerHTML = '<p class=\"initial-message\">Игра загружена. Нажмите \"Начать игру\".</p>';\n    }\n  };\n  initSaveLoadFeatures(getGameState, applyLoadedState, {\n    saveButton: saveButton,\n    loadButton: loadButton,\n    loadModal: loadModal,\n    loadListContainer: loadListContainer,\n    loadConfirmBtn: loadConfirmBtn,\n    loadCancelBtn: loadCancelBtn\n  }, 'memory_game');\n  console.log(\"Страница игры 'Поиск пар' инициализирована.\");\n}\n\n/**\r\n * Создает интерактивную игру \"Поиск пар\" внутри контейнера на доске.\r\n * @param {HTMLElement} gameWrapper - Родительский контейнер для игры (`.paste-game-wrapper`).\r\n * @param {string | null} boardRoomName - Имя комнаты доски (для URL WebSocket).\r\n * @param {string} gameInstanceId - Уникальный ID этого экземпляра игры на доске.\r\n */\nfunction createMemoryGameOnBoard(gameWrapper, boardRoomName, gameInstanceId) {\n  var localGameParams = (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.getGameParts)();\n  localGameParams.onWhiteboard = true;\n  localGameParams.gameId = gameInstanceId;\n  localGameParams.boardRoomName = boardRoomName;\n  localGameParams.name = \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u0430\\u0440 \".concat(gameInstanceId.split('-')[1] || '');\n  gameWrapper.memoryGameParams = localGameParams;\n  var gameContainer = document.createElement('div');\n  gameContainer.className = \"memory-game-wrapper\";\n  gameWrapper.gameContainer = gameContainer;\n  var closeButton = gameWrapper.querySelector('.paste-game-close');\n  var resizeHandle = gameWrapper.querySelector('.resize-handle');\n  gameWrapper.innerHTML = '';\n  if (closeButton) gameWrapper.appendChild(closeButton);\n  if (resizeHandle) gameWrapper.appendChild(resizeHandle);\n  gameWrapper.appendChild(gameContainer);\n  gameContainer.innerHTML = '<p class=\"initial-message\">Активируйте игру и выберите настройки в панели справа.</p>';\n  if (boardRoomName && gameInstanceId) {\n    var memoryGameWsUrl = \"ws://\".concat(window.location.host, \"/ws/memory_game_on_board/\").concat(boardRoomName, \"/\").concat(gameInstanceId, \"/\");\n    var memoryGameWs = new WebSocket(memoryGameWsUrl);\n    localGameParams.ws = memoryGameWs;\n    gameWrapper.memoryGameWebSocket = memoryGameWs;\n    memoryGameWs.onopen = function () {\n      console.log(\"[MemoryGame] WS Open. \\u0421\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0438\\u0440\\u0443\\u0435\\u043C \\u043D\\u0430\\u0447\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u0434\\u043B\\u044F \".concat(gameInstanceId));\n      var stateToSend = {\n        id: null,\n        name: localGameParams.name,\n        pairCount: localGameParams.pairCount,\n        selectedImageSet: localGameParams.selectedImageSet,\n        isCustomSet: false,\n        card_layout: [],\n        attempts: 0\n      };\n      memoryGameWs.send(JSON.stringify({\n        type: 'game_state_change',\n        gameState: stateToSend\n      }));\n    };\n    memoryGameWs.onclose = function (e) {\n      return console.log(\"[MemoryGame INSTANCE: \".concat(gameInstanceId, \"] WebSocket disconnected.\"), e.reason);\n    };\n    memoryGameWs.onerror = function (e) {\n      return console.error(\"[MemoryGame INSTANCE: \".concat(gameInstanceId, \"] WebSocket error.\"), e);\n    };\n    memoryGameWs.onmessage = function (e) {\n      var data = JSON.parse(e.data);\n      if (data.type === 'game_state_change') {\n        var receivedState = data.gameState;\n        Object.assign(gameWrapper.memoryGameParams, receivedState);\n        if (receivedState.isCustomSet) {\n          gameWrapper.memoryGameParams.customImageObjects = (receivedState.selectedImageSet || []).map(function (url) {\n            return {\n              url: url,\n              file: null\n            };\n          });\n        }\n        var useExistingLayout = receivedState.card_layout && receivedState.card_layout.length > 0;\n        (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.initializeBoard)(gameWrapper.gameContainer, gameWrapper.memoryGameParams, useExistingLayout);\n        var activeGameWrapper = document.querySelector('.paste-game-wrapper.active-game');\n        if (activeGameWrapper === gameWrapper) {\n          setupWhiteboardMemoryGame(gameWrapper);\n        }\n      } else if (data.type === 'card_click') {\n        (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.applyRemoteCardClick)(gameWrapper.gameContainer, gameWrapper.memoryGameParams, data.cardDomIndex);\n      }\n    };\n  } else {\n    // Локальный режим для этого экземпляра поиска пар\n    localGameParams.ws = null;\n    gameWrapper.memoryGameWebSocket = null;\n    console.log(\"[MemoryGame INSTANCE: \".concat(gameInstanceId, \"] Running in local mode (no WebSocket).\"));\n  }\n  console.log(\"\\u042D\\u043A\\u0437\\u0435\\u043C\\u043F\\u043B\\u044F\\u0440 \\u0438\\u0433\\u0440\\u044B \\\"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u0430\\u0440\\\" \".concat(gameInstanceId, \" \\u0438\\u043D\\u0438\\u0446\\u0438\\u0430\\u043B\\u0438\\u0437\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u043D\\u0430 \\u0434\\u043E\\u0441\\u043A\\u0435.\"));\n}\n\n/**\r\n * Настраивает панель настроек для активной игры \"Поиск пар\" на доске.\r\n * @param {HTMLElement} activeGameWrapper - Активный игровой контейнер.\r\n */\nfunction setupWhiteboardMemoryGame(activeGameWrapper) {\n  if (!activeGameWrapper || !activeGameWrapper.memoryGameParams) {\n    console.warn(\"Активная игра 'Поиск пар' не найдена или не инициализирована.\");\n    return;\n  }\n  var activeGameParams = activeGameWrapper.memoryGameParams;\n  var settingsPanel = document.querySelector('.settings-panel');\n  if (!settingsPanel) {\n    console.error(\"Панель настроек не найдена.\");\n    return;\n  }\n  var startButton = settingsPanel.querySelector('#start-memory-game');\n  var saveButton = settingsPanel.querySelector('#save-memory-game-btn');\n  var loadButton = settingsPanel.querySelector('#load-memory-game-btn');\n  var loadModal = document.getElementById('load-game-modal');\n  var loadListContainer = document.getElementById('load-list-container');\n  var loadConfirmBtn = document.getElementById('load-confirm-btn');\n  var loadCancelBtn = document.getElementById('load-cancel-btn');\n  if (!startButton || !saveButton || !loadButton || !loadModal) {\n    console.error(\"Ключевые элементы управления отсутствуют на панели настроек!\");\n    return;\n  }\n  var handleGameStateChangeForBoard = function handleGameStateChangeForBoard() {\n    if (activeGameParams.onWhiteboard && activeGameParams.ws && activeGameParams.ws.readyState === WebSocket.OPEN) {\n      activeGameParams.card_layout = [];\n      activeGameParams.attempts = 0;\n      var imageSetToSend = activeGameParams.isCustomSet ? activeGameParams.customImageObjects.map(function (obj) {\n        return obj.url;\n      }) : activeGameParams.selectedImageSet;\n      var stateToSend = {\n        id: activeGameParams.id,\n        name: activeGameParams.name,\n        pairCount: activeGameParams.pairCount,\n        selectedImageSet: imageSetToSend,\n        isCustomSet: activeGameParams.isCustomSet,\n        card_layout: [],\n        attempts: 0\n      };\n      activeGameParams.ws.send(JSON.stringify({\n        type: 'game_state_change',\n        gameState: stateToSend\n      }));\n    }\n  };\n  setupGameControls(settingsPanel, activeGameParams, handleGameStateChangeForBoard);\n  var startButtonClickHandler = function startButtonClickHandler() {\n    var currentActiveWrapper = document.querySelector('.paste-game-wrapper.active-game');\n    if (currentActiveWrapper && currentActiveWrapper === activeGameWrapper && currentActiveWrapper.memoryGameParams) {\n      (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.initializeBoard)(currentActiveWrapper.gameContainer, currentActiveWrapper.memoryGameParams, false);\n    } else {\n      console.warn(\"Активная игра изменилась, действие 'Перемешать' отменено.\");\n    }\n  };\n  startButton.removeEventListener('click', startButton.clickHandler);\n  startButton.addEventListener('click', startButtonClickHandler);\n  startButton.clickHandler = startButtonClickHandler;\n  var getGameStateForWhiteboard = function getGameStateForWhiteboard() {\n    var skipAlerts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var gameNameInput = settingsPanel.querySelector('#game-name');\n    activeGameParams.name = gameNameInput.value.trim();\n    if (!skipAlerts && !activeGameParams.name) {\n      alert(\"Введите название для сохранения.\");\n      gameNameInput.focus();\n      return null;\n    }\n    if (!activeGameParams.card_layout || activeGameParams.card_layout.length === 0) {\n      (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.initializeBoard)(activeGameWrapper.gameContainer, activeGameParams, false);\n    }\n    var gameState = {\n      id: activeGameParams.id,\n      name: activeGameParams.name,\n      pairCount: activeGameParams.pairCount,\n      cardLayout: activeGameParams.card_layout\n    };\n    if (activeGameParams.isCustomSet) {\n      var imageObjects = activeGameParams.customImageObjects || [];\n      if (!skipAlerts && imageObjects.length < activeGameParams.pairCount) {\n        alert(\"\\u041D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0439 \\u0434\\u043B\\u044F \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u044F. \\u0422\\u0440\\u0435\\u0431\\u0443\\u0435\\u0442\\u0441\\u044F \".concat(activeGameParams.pairCount, \", \\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043E \").concat(imageObjects.length, \".\"));\n        return null;\n      }\n      var hasNewFiles = imageObjects.some(function (obj) {\n        return obj.file;\n      });\n      if (!activeGameParams.id || hasNewFiles) {\n        gameState.customImages = [];\n        for (var i = 0; i < activeGameParams.pairCount; i++) {\n          var imgObj = imageObjects[i];\n          if (imgObj.file) {\n            // Если есть исходный файл, используем его\n            gameState.customImages.push(imgObj.file);\n          } else if (imgObj.url && imgObj.url.startsWith('data:image')) {\n            // Если файла нет, но есть data:URL, конвертируем его в Blob\n            var blob = dataURLtoBlob(imgObj.url);\n            if (blob) {\n              var filename = \"upload_\".concat(i, \".\").concat(blob.type.split('/')[1] || 'png');\n              gameState.customImages.push(new File([blob], filename, {\n                type: blob.type\n              }));\n            } else {\n              if (!skipAlerts) alert(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0438 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u2116\".concat(i + 1, \". \\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043F\\u0440\\u0435\\u0440\\u0432\\u0430\\u043D\\u043E.\"));\n              return null;\n            }\n          }\n        }\n        if (!skipAlerts && gameState.customImages.length < activeGameParams.pairCount) {\n          alert(\"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u043F\\u043E\\u0434\\u0433\\u043E\\u0442\\u043E\\u0432\\u0438\\u0442\\u044C \\u0432\\u0441\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u0434\\u043B\\u044F \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u044F. \\u0422\\u0440\\u0435\\u0431\\u0443\\u0435\\u0442\\u0441\\u044F \".concat(activeGameParams.pairCount, \", \\u0433\\u043E\\u0442\\u043E\\u0432\\u043E \").concat(gameState.customImages.length, \".\"));\n          return null;\n        }\n      }\n    } else {\n      var presetName = findPresetNameByUrl(activeGameParams.selectedImageSet[0]);\n      if (presetName) {\n        gameState.presetName = presetName;\n      } else if (!skipAlerts) {\n        alert(\"Не удалось определить имя пресета.\");\n        return null;\n      }\n    }\n    return gameState;\n  };\n  var applyLoadedStateForWhiteboard = function applyLoadedStateForWhiteboard(loadedData) {\n    var startNewGame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var currentActiveWrapper = document.querySelector('.paste-game-wrapper.active-game');\n    if (!currentActiveWrapper || currentActiveWrapper !== activeGameWrapper) {\n      alert(\"Активная игра изменилась. Загрузка отменена.\");\n      return;\n    }\n    var isUpdateConfirmation = Object.keys(loadedData).length === 1 && loadedData.id && !startNewGame;\n    if (isUpdateConfirmation) {\n      activeGameParams.id = loadedData.id;\n      return;\n    }\n    var mappedLoadedData = _objectSpread(_objectSpread({}, loadedData), {}, {\n      pairCount: loadedData.pair_count,\n      attempts: loadedData.attempts || 0\n    });\n    delete mappedLoadedData.pair_count;\n    Object.assign(activeGameParams, mappedLoadedData);\n    activeGameParams.isCustomSet = !!loadedData.custom_image_urls;\n    if (activeGameParams.isCustomSet) {\n      activeGameParams.selectedImageSet = loadedData.custom_image_urls;\n      activeGameParams.customImageObjects = loadedData.custom_image_urls.map(function (url) {\n        return {\n          url: url,\n          file: null\n        };\n      });\n    } else {\n      activeGameParams.selectedImageSet = (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.getFullPresetImageUrls)(loadedData.preset_name);\n      activeGameParams.customImageObjects = [];\n    }\n    setupGameControls(settingsPanel, activeGameParams, handleGameStateChangeForBoard);\n    saveButton.textContent = 'Обновить';\n    if (startNewGame) {\n      // Отрисовываем поле у загружающего.\n      var useExistingLayout = loadedData.card_layout && loadedData.card_layout.length > 0;\n      (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.initializeBoard)(activeGameWrapper.gameContainer, activeGameParams, useExistingLayout);\n\n      // отправляем новое, загруженное из БД, состояние всем остальным.\n      if (activeGameParams.onWhiteboard && activeGameParams.ws && activeGameParams.ws.readyState === WebSocket.OPEN) {\n        console.log(\"[APPLY LOADED] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043D\\u043E\\u0433\\u043E \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u044F \\u0438\\u0433\\u0440\\u044B \".concat(activeGameParams.gameId));\n        var stateToSend = {\n          id: activeGameParams.id,\n          name: activeGameParams.name,\n          pairCount: activeGameParams.pairCount,\n          selectedImageSet: activeGameParams.selectedImageSet,\n          // Уже содержит либо пресеты, либо data:URL\n          isCustomSet: activeGameParams.isCustomSet,\n          card_layout: activeGameParams.card_layout || [],\n          attempts: activeGameParams.attempts || 0\n        };\n        activeGameParams.ws.send(JSON.stringify({\n          type: 'game_state_change',\n          gameState: stateToSend\n        }));\n      }\n      alert(\"\\u0418\\u0433\\u0440\\u0430 \\\"\".concat(loadedData.name, \"\\\" \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u0430 \\u0432 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0439 \\u043A\\u043E\\u043D\\u0442\\u0435\\u0439\\u043D\\u0435\\u0440.\"));\n    }\n  };\n\n  // Инициализируем функции Сохранения/Загрузки.\n  initSaveLoadFeatures(getGameStateForWhiteboard, applyLoadedStateForWhiteboard, {\n    saveButton: saveButton,\n    loadButton: loadButton,\n    loadModal: loadModal,\n    loadListContainer: loadListContainer,\n    loadConfirmBtn: loadConfirmBtn,\n    loadCancelBtn: loadCancelBtn\n  }, 'memory_game');\n  var gameNameInput = settingsPanel.querySelector('#game-name');\n  var pairCountSelect = settingsPanel.querySelector('#pair-count-select');\n  if (gameNameInput) gameNameInput.value = activeGameParams.name || '';\n  if (pairCountSelect) pairCountSelect.value = activeGameParams.pairCount;\n  saveButton.textContent = activeGameParams.id ? 'Обновить' : 'Сохранить';\n}\n\n/**\r\n * Универсальная функция для настройки контролов игры \"Поиск пар\".\r\n * @param {HTMLElement} settingsContainer - Контейнер с элементами настроек.\r\n * @param {object} gameParams - Объект с параметрами игры для изменения.\r\n * @param {function | null} onSettingsChange - Колбэк, вызываемый при изменении настроек.\r\n */\nfunction setupGameControls(settingsContainer, gameParams, onSettingsChange) {\n  var gameNameInput = settingsContainer.querySelector('#game-name');\n  var pairCountSelect = settingsContainer.querySelector('#pair-count-select');\n  var presetSetElements = settingsContainer.querySelectorAll('.preset-set');\n  var customImagesInput = settingsContainer.querySelector('#custom-images-input');\n  var customImagesPreviewContainer = settingsContainer.querySelector('#custom-images-preview');\n  var previewGrid = customImagesPreviewContainer === null || customImagesPreviewContainer === void 0 ? void 0 : customImagesPreviewContainer.querySelector('.preview-grid');\n  var customImagesInfoText = customImagesPreviewContainer === null || customImagesPreviewContainer === void 0 ? void 0 : customImagesPreviewContainer.querySelector('#custom-images-info-text');\n  if (!gameNameInput || !pairCountSelect || !presetSetElements.length || !customImagesInput || !previewGrid || !customImagesInfoText) {\n    console.error(\"Не удалось найти все элементы управления в 'setupGameControls'.\");\n    return;\n  }\n\n  // Инициализация UI из текущих параметров\n  gameNameInput.value = gameParams.name || '';\n  pairCountSelect.value = gameParams.pairCount;\n  updateCustomImagePreviewUI(gameParams, customImagesPreviewContainer, customImagesInfoText, previewGrid);\n  var activePresetName = gameParams.isCustomSet ? null : findPresetNameByUrl(gameParams.selectedImageSet[0]);\n  presetSetElements.forEach(function (el) {\n    el.classList.toggle('selected', el.dataset.setName === activePresetName);\n  });\n  var gameNameInputHandler = function gameNameInputHandler(e) {\n    gameParams.name = e.target.value.trim();\n  };\n  gameNameInput.removeEventListener('input', gameNameInput.inputHandler);\n  gameNameInput.addEventListener('input', gameNameInputHandler);\n  gameNameInput.inputHandler = gameNameInputHandler;\n  var pairCountSelectHandler = function pairCountSelectHandler(e) {\n    gameParams.pairCount = parseInt(e.target.value, 10);\n    if (onSettingsChange) onSettingsChange();\n  };\n  pairCountSelect.removeEventListener('change', pairCountSelect.changeHandler);\n  pairCountSelect.addEventListener('change', pairCountSelectHandler);\n  pairCountSelect.changeHandler = pairCountSelectHandler;\n  presetSetElements.forEach(function (presetEl) {\n    var presetClickHandler = function presetClickHandler() {\n      if (presetEl.classList.contains('selected') && !gameParams.isCustomSet) return;\n      presetSetElements.forEach(function (el) {\n        return el.classList.remove('selected');\n      });\n      presetEl.classList.add('selected');\n      gameParams.selectedImageSet = (0,_memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.getFullPresetImageUrls)(presetEl.dataset.setName);\n      gameParams.isCustomSet = false;\n      gameParams.customImageObjects = [];\n      customImagesInput.value = '';\n      updateCustomImagePreviewUI(gameParams, customImagesPreviewContainer, customImagesInfoText, previewGrid);\n      if (onSettingsChange) onSettingsChange();\n    };\n    presetEl.removeEventListener('click', presetEl.clickHandler);\n    presetEl.addEventListener('click', presetClickHandler);\n    presetEl.clickHandler = presetClickHandler;\n  });\n  var customImagesInputChangeHandler = function customImagesInputChangeHandler(event) {\n    var files = event.target.files;\n    gameParams.customImageObjects = [];\n    if (files.length > 0) {\n      gameParams.isCustomSet = true;\n      presetSetElements.forEach(function (el) {\n        return el.classList.remove('selected');\n      });\n      var loadedCount = 0;\n      var totalFiles = files.length;\n      Array.from(files).forEach(function (file) {\n        if (!file.type.startsWith('image/')) {\n          if (++loadedCount === totalFiles && onSettingsChange) onSettingsChange();\n          return;\n        }\n        var reader = new FileReader();\n        reader.onload = function (e) {\n          gameParams.customImageObjects.push({\n            url: e.target.result,\n            file: file\n          });\n          if (++loadedCount === totalFiles) {\n            updateCustomImagePreviewUI(gameParams, customImagesPreviewContainer, customImagesInfoText, previewGrid);\n            if (onSettingsChange) onSettingsChange();\n          }\n        };\n        reader.onerror = function () {\n          if (++loadedCount === totalFiles && onSettingsChange) onSettingsChange();\n        };\n        reader.readAsDataURL(file);\n      });\n    } else {\n      gameParams.isCustomSet = false;\n      var selectedPreset = settingsContainer.querySelector('.preset-set.selected') || presetSetElements[0];\n      if (selectedPreset && typeof selectedPreset.clickHandler === 'function') {\n        selectedPreset.clickHandler();\n      }\n    }\n  };\n  customImagesInput.removeEventListener('change', customImagesInput.changeHandler);\n  customImagesInput.addEventListener('change', customImagesInputChangeHandler);\n  customImagesInput.changeHandler = customImagesInputChangeHandler;\n}\n\n/**\r\n * Обновляет UI для предпросмотра пользовательских изображений на панели настроек.\r\n */\nfunction updateCustomImagePreviewUI(params, previewContainer, infoText, grid) {\n  if (!grid || !infoText || !previewContainer) return;\n  grid.innerHTML = '';\n  var sourceObjects = params.isCustomSet ? params.customImageObjects.length > 0 ? params.customImageObjects : (params.selectedImageSet || []).map(function (url) {\n    return {\n      url: url\n    };\n  }) : [];\n  if (params.isCustomSet && sourceObjects.length > 0) {\n    infoText.innerHTML = \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043E \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0439: <span>\".concat(sourceObjects.length, \"</span>\");\n    sourceObjects.forEach(function (imgObj) {\n      var imgPreview = document.createElement('img');\n      imgPreview.src = imgObj.url;\n      imgPreview.alt = \"preview\";\n      imgPreview.classList.add('preview-thumb');\n      grid.appendChild(imgPreview);\n    });\n    previewContainer.style.display = 'block';\n  } else {\n    infoText.innerHTML = 'Загружено изображений: <span id=\"custom-images-count\">0</span>';\n    previewContainer.style.display = 'none';\n  }\n}\n\n/**\r\n * Вспомогательная функция для определения имени пресета по URL первого изображения.\r\n * @param {string} imageUrl - URL изображения.\r\n * @returns {string|null} Имя пресета или null.\r\n */\nfunction findPresetNameByUrl(imageUrl) {\n  if (!imageUrl || typeof presetImagesBasePath === 'undefined' || typeof _memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.PRESET_IMAGE_SETS_CONFIG === 'undefined') return null;\n  var pathWithoutBase = imageUrl.replace(presetImagesBasePath, '');\n  var setName = pathWithoutBase.split('/')[0];\n  return _memory_game_logic_js__WEBPACK_IMPORTED_MODULE_0__.PRESET_IMAGE_SETS_CONFIG.hasOwnProperty(setName) ? setName : null;\n}\nwindow.MemoryGameModule = {\n  createMemoryGameSeparately: createMemoryGameSeparately,\n  createMemoryGameOnBoard: createMemoryGameOnBoard,\n  setupWhiteboardMemoryGame: setupWhiteboardMemoryGame\n};\n\n//# sourceURL=webpack://frontend/./memory_game/index.js?");

/***/ }),

/***/ "./memory_game/memory-game-logic.js":
/*!******************************************!*\
  !*** ./memory_game/memory-game-logic.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PRESET_IMAGE_SETS_CONFIG: () => (/* binding */ PRESET_IMAGE_SETS_CONFIG),\n/* harmony export */   applyRemoteCardClick: () => (/* binding */ applyRemoteCardClick),\n/* harmony export */   getFullPresetImageUrls: () => (/* binding */ getFullPresetImageUrls),\n/* harmony export */   getGameParts: () => (/* binding */ getGameParts),\n/* harmony export */   initializeBoard: () => (/* binding */ initializeBoard),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   stopTimer: () => (/* binding */ stopTimer)\n/* harmony export */ });\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// Изображения для пресетов пока в процессе поиска\nvar PRESET_IMAGE_SETS_CONFIG = {\n  fruits: ['fruits/apple.png', 'fruits/banana.png', 'fruits/cherry.png', 'fruits/grapes.png', 'fruits/lemon.png', 'fruits/orange.png', 'fruits/strawberry.png', 'fruits/pineapple.png', 'fruits/kiwi.png', 'fruits/watermelon.png', 'fruits/mango.png', 'fruits/coconut.png'],\n  animals: ['animals/panda.png', 'animals/fox.png', 'animals/bear.png', 'animals/koala.png', 'animals/tiger.png', 'animals/lion.png', 'animals/cow.png', 'animals/pig.png', 'animals/frog.png', 'animals/monkey.png', 'animals/chicken.png', 'animals/penguin.png']\n};\n\n/**\r\n * Генерирует полные URL-адреса для изображений из предустановленного набора.\r\n * Использует глобальную переменную `presetImagesBasePath`, определенную в HTML.\r\n * @param {string} setName - Имя набора из PRESET_IMAGE_SETS_CONFIG.\r\n * @returns {string[]} Массив полных URL-адресов изображений или пустой массив в случае ошибки.\r\n */\nfunction getFullPresetImageUrls(setName) {\n  if (PRESET_IMAGE_SETS_CONFIG[setName] && typeof presetImagesBasePath !== 'undefined') {\n    return PRESET_IMAGE_SETS_CONFIG[setName].map(function (relativePath) {\n      return presetImagesBasePath + relativePath;\n    });\n  }\n  console.warn(\"\\u041D\\u0430\\u0431\\u043E\\u0440 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0439 \\\"\".concat(setName, \"\\\" \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u0438\\u043B\\u0438 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u0430\\u044F presetImagesBasePath \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430.\"));\n  return [];\n}\n\n// Имя предустановленного набора по умолчанию\nvar DEFAULT_PRESET_NAME = 'fruits';\n\n/**\r\n * Рассчитывает оптимальное количество строк и столбцов для сетки карточек.\r\n * Стремится сделать поле как можно более квадратным.\r\n * @param {number} totalCards - Общее количество карточек.\r\n * @returns {{rows: number, cols: number}} Объект с количеством строк и столбцов.\r\n */\nfunction calculateGridDimensions(totalCards) {\n  var bestRows = 1;\n  var bestCols = totalCards;\n  var minDiff = totalCards - 1;\n\n  // Ищем делители числа totalCards, чтобы найти возможные конфигурации сетки\n  for (var rows = 1; rows * rows <= totalCards; rows++) {\n    if (totalCards % rows === 0) {\n      var cols = totalCards / rows;\n      // Если текущая разница меньше предыдущей минимальной, обновляем лучшие значения\n      if (Math.abs(rows - cols) < minDiff) {\n        minDiff = Math.abs(rows - cols);\n        bestRows = rows;\n        bestCols = cols;\n      } else if (Math.abs(rows - cols) === minDiff) {\n        // Если разница та же, предпочитаем вариант, где строк меньше или равно столбцам\n        if (rows < bestRows) {\n          bestRows = rows;\n          bestCols = cols;\n        }\n      }\n    }\n  }\n  return bestRows > bestCols ? {\n    rows: bestCols,\n    cols: bestRows\n  } : {\n    rows: bestRows,\n    cols: bestCols\n  };\n}\n\n/**\r\n * Создает и возвращает объект с начальными параметрами игры.\r\n * @returns {object} Объект с параметрами игры.\r\n */\nfunction getGameParts() {\n  return {\n    // Параметры по умолчанию\n    id: null,\n    name: \"Моя игра в пары\",\n    pairCount: 4,\n    selectedImageSet: getFullPresetImageUrls(DEFAULT_PRESET_NAME),\n    isCustomSet: false,\n    customImageObjects: [],\n    // { url: DataURL, file: FileObject } для пользовательских изображений\n    card_layout: [],\n    gridSize: {\n      rows: 0,\n      cols: 0\n    },\n    firstSelectedCard: null,\n    secondSelectedCard: null,\n    matchesFound: 0,\n    totalMatches: 0,\n    attempts: 0,\n    lockBoard: false,\n    timerInterval: null,\n    secondsElapsed: 0,\n    // Ссылки на DOM-элементы для обновления UI (инициализируются в initializeBoard)\n    uiTimeEl: null,\n    uiAttemptsEl: null,\n    uiCompletionMessageEl: null,\n    uiCompletionTextEl: null,\n    // Параметры для доски\n    onWhiteboard: false,\n    gameId: null,\n    boardRoomName: null,\n    ws: null\n  };\n}\n\n/**\r\n * Перемешивает элементы массива случайным образом (алгоритм Фишера-Йетса).\r\n * @param {Array<any>} array - Массив для перемешивания.\r\n * @returns {Array<any>} Новый массив с перемешанными элементами.\r\n */\nfunction shuffle(array) {\n  var newArray = _toConsumableArray(array);\n  for (var i = newArray.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [newArray[j], newArray[i]];\n    newArray[i] = _ref[0];\n    newArray[j] = _ref[1];\n  }\n  return newArray;\n}\n\n/**\r\n * Инициализирует и создает игровое поле.\r\n * @param {HTMLElement} boardWrapper - DOM-элемент, в который будет встроено игровое поле (`.memory-game-wrapper`).\r\n * @param {object} gameParams - Объект с текущими параметрами игры.\r\n * @param {boolean} useExistingLayout - Если true, использует gameParams.card_layout, иначе генерирует новый.\r\n */\nfunction initializeBoard(boardWrapper, gameParams) {\n  var useExistingLayout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  boardWrapper.innerHTML = '';\n\n  // Создаем главный контейнер для игровой доски\n  var gameBoard = document.createElement('div');\n  gameBoard.className = 'memory-game-board';\n  boardWrapper.appendChild(gameBoard);\n\n  // Создаем панель с информацией о ходе игры\n  var gameDetailsBar = document.createElement('div');\n  gameDetailsBar.className = 'game-details-bar';\n  gameDetailsBar.innerHTML = \"\\n        <p class=\\\"time\\\">\\u0412\\u0440\\u0435\\u043C\\u044F: <b data-role=\\\"time\\\">0</b>\\u0441</p>\\n        <p class=\\\"moves\\\">\\u0425\\u043E\\u0434\\u044B: <b data-role=\\\"attempts\\\">0</b></p>\\n    \";\n  gameBoard.appendChild(gameDetailsBar);\n  gameParams.uiTimeEl = gameDetailsBar.querySelector('b[data-role=\"time\"]');\n  gameParams.uiAttemptsEl = gameDetailsBar.querySelector('b[data-role=\"attempts\"]');\n\n  // Создаем контейнер для сетки карточек\n  var cardsGridContainer = document.createElement('div');\n  cardsGridContainer.className = 'cards-grid-container';\n  gameBoard.appendChild(cardsGridContainer);\n\n  // Создаем DOM-элемент для сообщения о завершении игры, если он еще не был создан.\n  var completionMessageDiv = document.createElement('div');\n  completionMessageDiv.id = 'game-completion-message';\n  completionMessageDiv.style.display = 'none';\n  var completionTextP = document.createElement('p');\n  completionMessageDiv.appendChild(completionTextP);\n  boardWrapper.appendChild(completionMessageDiv);\n\n  // Каждый раз сохраняем ссылку на новый, существующий в DOM элемент.\n  gameParams.uiCompletionMessageEl = completionMessageDiv;\n  gameParams.uiCompletionTextEl = completionTextP;\n\n  // Обновляем/сбрасываем игровые параметры\n  gameParams.totalMatches = gameParams.pairCount;\n  gameParams.matchesFound = 0;\n  gameParams.attempts = useExistingLayout ? gameParams.attempts || 0 : 0;\n  gameParams.firstSelectedCard = null;\n  gameParams.secondSelectedCard = null;\n  gameParams.lockBoard = false;\n  gameParams.secondsElapsed = 0;\n  var uniqueImageUrls;\n  if (gameParams.isCustomSet) {\n    var sourceUrls = gameParams.customImageObjects && gameParams.customImageObjects.length > 0 ? gameParams.customImageObjects.map(function (obj) {\n      return obj.url;\n    }) : gameParams.selectedImageSet;\n    if (!sourceUrls || sourceUrls.length < gameParams.pairCount) {\n      boardWrapper.innerHTML = \"<p class=\\\"initial-message\\\">\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \\u041D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\u0441\\u043A\\u0438\\u0445 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0439.</p>\";\n      return;\n    }\n    uniqueImageUrls = sourceUrls.slice(0, gameParams.pairCount);\n  } else {\n    if (!gameParams.selectedImageSet || gameParams.selectedImageSet.length < gameParams.pairCount) {\n      boardWrapper.innerHTML = \"<p class=\\\"initial-message\\\">\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \\u041D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0439 \\u0432 \\u043F\\u0440\\u0435\\u0441\\u0435\\u0442\\u0435.</p>\";\n      return;\n    }\n    uniqueImageUrls = gameParams.selectedImageSet.slice(0, gameParams.pairCount);\n  }\n  if (!useExistingLayout || !gameParams.card_layout || gameParams.card_layout.length !== gameParams.pairCount * 2) {\n    console.log(\"[MemoryGame] \\u0413\\u0435\\u043D\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F \\u043D\\u043E\\u0432\\u043E\\u0433\\u043E layout \\u0434\\u043B\\u044F \".concat(gameParams.gameId));\n    var indices = Array.from({\n      length: gameParams.pairCount\n    }, function (_, i) {\n      return i;\n    });\n    gameParams.card_layout = shuffle([].concat(indices, indices));\n    if (gameParams.onWhiteboard && gameParams.ws && gameParams.ws.readyState === WebSocket.OPEN) {\n      console.log(\"[MemoryGame-LOGIC] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043D\\u043E\\u0432\\u043E\\u0433\\u043E \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u044F (\\u0441 card_layout) \\u0434\\u043B\\u044F \\u0438\\u0433\\u0440\\u044B \".concat(gameParams.gameId));\n      var imageSetToSend = gameParams.isCustomSet ? gameParams.customImageObjects.map(function (obj) {\n        return obj.url;\n      }) : gameParams.selectedImageSet;\n      var stateToSend = {\n        id: gameParams.id,\n        name: gameParams.name,\n        pairCount: gameParams.pairCount,\n        selectedImageSet: imageSetToSend,\n        isCustomSet: gameParams.isCustomSet,\n        card_layout: gameParams.card_layout,\n        attempts: 0\n      };\n      gameParams.ws.send(JSON.stringify({\n        type: 'game_state_change',\n        gameState: stateToSend\n      }));\n    }\n  } else {\n    console.log(\"[MemoryGame] \\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E layout \\u0434\\u043B\\u044F \".concat(gameParams.gameId));\n  }\n  var totalCards = gameParams.pairCount * 2;\n  gameParams.gridSize = calculateGridDimensions(totalCards);\n  cardsGridContainer.style.gridTemplateColumns = \"repeat(\".concat(gameParams.gridSize.cols, \", 1fr)\");\n  cardsGridContainer.style.gridTemplateRows = \"repeat(\".concat(gameParams.gridSize.rows, \", 1fr)\");\n\n  // Создаем и добавляем карточки на поле\n  gameParams.card_layout.forEach(function (imageIndex, cardDomIndex) {\n    var imageUrl = uniqueImageUrls[imageIndex];\n    var cardItem = document.createElement('div');\n    cardItem.classList.add('memory-card');\n    cardItem.dataset.imageUrl = imageUrl;\n    cardItem.dataset.cardDomIndex = cardDomIndex;\n\n    // Создаем лицевую сторону карточки\n    var frontFace = document.createElement('div');\n    frontFace.classList.add('card-face', 'front');\n    var img = document.createElement('img');\n    img.src = imageUrl;\n    img.alt = \"Изображение карточки\";\n    img.classList.add('card-face-image');\n    frontFace.appendChild(img);\n\n    // Создаем оборотную сторону (рубашку)\n    var backFace = document.createElement('div');\n    backFace.classList.add('card-face', 'back');\n    cardItem.appendChild(frontFace);\n    cardItem.appendChild(backFace);\n    cardItem.addEventListener('click', function () {\n      return handleCardClick(cardItem, gameParams);\n    });\n    cardsGridContainer.appendChild(cardItem);\n  });\n  updateUIDetails(gameParams);\n  startTimer(gameParams);\n  return true;\n}\n\n/**\r\n * Обновляет отображение времени и количества ходов в UI.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction updateUIDetails(gameParams) {\n  if (gameParams.uiTimeEl) gameParams.uiTimeEl.textContent = gameParams.secondsElapsed;\n  if (gameParams.uiAttemptsEl) gameParams.uiAttemptsEl.textContent = gameParams.attempts;\n}\n\n/**\r\n * Обрабатывает клик по карточке. Отправляет событие по WebSocket, если игра на доске.\r\n * @param {HTMLElement} clickedCard - DOM-элемент карточки, по которой кликнули.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction handleCardClick(clickedCard, gameParams) {\n  if (gameParams.lockBoard || clickedCard === gameParams.firstSelectedCard || clickedCard.classList.contains('flipped') || clickedCard.classList.contains('matched') || gameParams.matchesFound === gameParams.totalMatches) {\n    return;\n  }\n  if (gameParams.onWhiteboard && gameParams.ws && gameParams.ws.readyState === WebSocket.OPEN) {\n    gameParams.ws.send(JSON.stringify({\n      type: 'card_click',\n      cardDomIndex: parseInt(clickedCard.dataset.cardDomIndex, 10)\n    }));\n  }\n  flipAndCheck(clickedCard, gameParams);\n}\n\n/**\r\n * Применяет удаленный клик по карточке, полученный через WebSocket.\r\n * @param {HTMLElement} boardWrapper - Контейнер игры.\r\n * @param {object} gameParams - Параметры игры.\r\n * @param {number} cardDomIndex - Индекс карточки, по которой кликнули.\r\n */\nfunction applyRemoteCardClick(boardWrapper, gameParams, cardDomIndex) {\n  var cardToClick = boardWrapper.querySelector(\".memory-card[data-card-dom-index=\\\"\".concat(cardDomIndex, \"\\\"]\"));\n  if (cardToClick) {\n    flipAndCheck(cardToClick, gameParams);\n  } else {\n    console.warn(\"[REMOTE] \\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430 \\u0441 \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\\u043E\\u043C \".concat(cardDomIndex, \" \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0430.\"));\n  }\n}\n\n/**\r\n * Общая логика переворота карточки и проверки совпадения.\r\n * @param {HTMLElement} clickedCard - Карточка для взаимодействия.\r\n * @param {object} gameParams - Параметры игры.\r\n */\nfunction flipAndCheck(clickedCard, gameParams) {\n  if (clickedCard.classList.contains('flipped') || clickedCard.classList.contains('matched') || gameParams.lockBoard) return;\n  clickedCard.classList.add('flipped');\n  if (!gameParams.firstSelectedCard) {\n    gameParams.firstSelectedCard = clickedCard;\n    return;\n  }\n  gameParams.secondSelectedCard = clickedCard;\n  gameParams.lockBoard = true;\n  gameParams.attempts++;\n  updateUIDetails(gameParams);\n  checkForMatch(gameParams);\n}\n\n/**\r\n * Проверяет, совпадают ли две выбранные карточки.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction checkForMatch(gameParams) {\n  var isMatch = gameParams.firstSelectedCard.dataset.imageUrl === gameParams.secondSelectedCard.dataset.imageUrl;\n  if (isMatch) {\n    gameParams.matchesFound++;\n    gameParams.firstSelectedCard.classList.add('matched');\n    gameParams.secondSelectedCard.classList.add('matched');\n    resetTurn(gameParams);\n    checkVictory(gameParams);\n  } else {\n    // Устанавливаем таймаут, чтобы игрок успел увидеть вторую карточку перед тем, как они перевернутся обратно\n    setTimeout(function () {\n      if (gameParams.firstSelectedCard) gameParams.firstSelectedCard.classList.remove('flipped');\n      if (gameParams.secondSelectedCard) gameParams.secondSelectedCard.classList.remove('flipped');\n      resetTurn(gameParams);\n    }, 1000);\n  }\n}\n\n/**\r\n * Сбрасывает состояние выбора карт (firstSelectedCard, secondSelectedCard) и разблокирует доску.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction resetTurn(gameParams) {\n  gameParams.firstSelectedCard = null;\n  gameParams.secondSelectedCard = null;\n  gameParams.lockBoard = false;\n}\n\n/**\r\n * Проверяет, найдены ли все пары, и отображает сообщение о победе.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction checkVictory(gameParams) {\n  if (gameParams.matchesFound === gameParams.totalMatches && gameParams.totalMatches > 0) {\n    stopTimer(gameParams);\n    if (gameParams.uiCompletionMessageEl && gameParams.uiCompletionTextEl) {\n      gameParams.uiCompletionTextEl.textContent = \"\\u041F\\u043E\\u0437\\u0434\\u0440\\u0430\\u0432\\u043B\\u044F\\u0435\\u043C! \\u0412\\u044B \\u043D\\u0430\\u0448\\u043B\\u0438 \\u0432\\u0441\\u0435 \".concat(gameParams.totalMatches, \" \\u043F\\u0430\\u0440\\u044B \\u0437\\u0430 \").concat(gameParams.attempts, \" \\u0445\\u043E\\u0434\\u043E\\u0432 \\u0438 \").concat(gameParams.secondsElapsed, \"\\u0441!\");\n      gameParams.uiCompletionMessageEl.style.display = 'block';\n    } else {\n      console.error(\"Элементы сообщения о победе не найдены в gameParams при проверке победы.\");\n    }\n  }\n}\n\n/**\r\n * Запускает игровой таймер.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction startTimer(gameParams) {\n  stopTimer(gameParams);\n  gameParams.secondsElapsed = 0;\n  updateUIDetails(gameParams);\n  gameParams.timerInterval = setInterval(function () {\n    gameParams.secondsElapsed++;\n    updateUIDetails(gameParams);\n  }, 1000);\n}\n\n/**\r\n * Останавливает игровой таймер.\r\n * @param {object} gameParams - Объект с параметрами игры.\r\n */\nfunction stopTimer(gameParams) {\n  if (gameParams.timerInterval) {\n    clearInterval(gameParams.timerInterval);\n    gameParams.timerInterval = null;\n  }\n}\n\n//# sourceURL=webpack://frontend/./memory_game/memory-game-logic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./memory_game/index.js");
/******/ 	
/******/ })()
;