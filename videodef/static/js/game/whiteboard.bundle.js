/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./puzzle/index.js":
/*!*************************!*\
  !*** ./puzzle/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPuzzleOnBoard: () => (/* binding */ createPuzzleOnBoard),\n/* harmony export */   puzzleParams: () => (/* binding */ puzzleParams)\n/* harmony export */ });\n/* harmony import */ var _puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./puzzle-logic.js */ \"./puzzle/puzzle-logic.js\");\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\nvar puzzleParams = {\n  onWhiteboard: false // Флаг для проверки: создан ли пазл на доске\n};\nwindow.createPuzzleSeparately = createPuzzleSeparately;\n\n/**\r\n * Назначает обработчики для пользовательского изображения, пресетов и сложности\r\n * @param {Object} options\r\n * @param {HTMLInputElement} options.customInput - Элемент загрузки изображения\r\n * @param {NodeList} options.presets - Коллекция элементов пресетов\r\n * @param {HTMLSelectElement} options.difficultySelect - Выпадающий список сложности\r\n * @param {Object} options.puzzleParams - Параметры пазла\r\n * @param {HTMLElement} [options.puzzleContainer] - Контейнер пазла (опционально для моментального обновления фона)\r\n * @param {HTMLElement} [options.message] - Сообщение о состоянии (опционально для пересоздания пазла)\r\n * @param {boolean} [options.instantUpdate] - Нужно ли сразу обновлять пазл (по умолчанию true)\r\n */\nfunction setupPuzzleControls(_ref) {\n  var customInput = _ref.customInput,\n    presets = _ref.presets,\n    difficultySelect = _ref.difficultySelect,\n    puzzleParams = _ref.puzzleParams,\n    puzzleContainer = _ref.puzzleContainer,\n    message = _ref.message,\n    _ref$instantUpdate = _ref.instantUpdate,\n    instantUpdate = _ref$instantUpdate === void 0 ? true : _ref$instantUpdate;\n  // Обработчик загрузки пользовательского изображения\n  customInput.addEventListener('change', function (e) {\n    var file = e.target.files[0];\n    if (file) {\n      var reader = new FileReader();\n      reader.onload = function () {\n        puzzleParams.selectedImage = reader.result;\n        if (instantUpdate && puzzleContainer) {\n          updatePuzzleImage(puzzleContainer, puzzleParams);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  });\n\n  // Обработчики выбора пресетных изображений\n  presets.forEach(function (preset) {\n    preset.addEventListener('click', function () {\n      presets.forEach(function (p) {\n        return p.classList.remove('selected');\n      });\n      preset.classList.add('selected');\n      puzzleParams.selectedImage = preset.dataset.src;\n      if (instantUpdate && puzzleContainer) {\n        updatePuzzleImage(puzzleContainer, puzzleParams);\n      }\n    });\n  });\n\n  // Обработчик для изменения сложности (размерность сетки)\n  difficultySelect.addEventListener('change', function (e) {\n    puzzleParams.gridSize = parseInt(e.target.value, 10);\n    if (instantUpdate && puzzleContainer && message) {\n      (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.createPuzzle)(puzzleContainer, puzzleParams, message);\n    }\n  });\n}\n\n/**\r\n * Создает интерактивный пазл внутри игрового контейнера на доске\r\n * @param {HTMLElement} gameWrapper - Родительский контейнер для пазла\r\n */\nfunction createPuzzleOnBoard(gameWrapper) {\n  // Получаем компоненты пазла: параметры, контейнер и сообщение\n  var _getPuzzleParts = (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.getPuzzleParts)(),\n    _getPuzzleParts2 = _slicedToArray(_getPuzzleParts, 3),\n    puzzleParams = _getPuzzleParts2[0],\n    puzzleContainer = _getPuzzleParts2[1],\n    message = _getPuzzleParts2[2];\n\n  // Получаем элементы управления из панели настроек на доске\n  var customInput = document.getElementById('custom-image'); // Элемент для загрузки изображения\n  var difficultySelect = document.getElementById('difficulty'); // Выпадающий список сложности\n  var presets = document.querySelectorAll('.preset'); // Пресеты изображений\n\n  // Назначаем обработчики\n  setupPuzzleControls({\n    customInput: customInput,\n    presets: presets,\n    difficultySelect: difficultySelect,\n    puzzleParams: puzzleParams,\n    puzzleContainer: puzzleContainer,\n    message: message,\n    instantUpdate: true\n  });\n  (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.createPuzzle)(puzzleContainer, puzzleParams, message);\n\n  // Устанавливаем начальное изображение для пазла\n  updatePuzzleImage(puzzleContainer, puzzleParams);\n\n  // Добавляем элементы на доску\n  gameWrapper.appendChild(puzzleContainer);\n  gameWrapper.appendChild(message);\n}\n\n/**\r\n * Обновляет фоновое изображение для всех элементов пазла\r\n * @param {HTMLElement} puzzleContainer - Контейнер с элементами пазла\r\n * @param {Object} puzzleParams - Параметры пазла\r\n */\nfunction updatePuzzleImage(puzzleContainer, puzzleParams) {\n  puzzleContainer.querySelectorAll('.puzzle-piece').forEach(function (piece) {\n    piece.style.backgroundImage = \"url(\\\"\".concat(puzzleParams.selectedImage, \"\\\")\");\n  });\n  (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.placePieces)(puzzleContainer, puzzleParams);\n}\n\n/**\r\n * Создает независимый пазл вне основной доски\r\n */\nfunction createPuzzleSeparately() {\n  var _getPuzzleParts3 = (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.getPuzzleParts)(),\n    _getPuzzleParts4 = _slicedToArray(_getPuzzleParts3, 3),\n    puzzleParams = _getPuzzleParts4[0],\n    puzzleContainer = _getPuzzleParts4[1],\n    message = _getPuzzleParts4[2];\n  // Создание основного контейнера для пазла\n  var puzzleWrapper = document.createElement('div');\n  puzzleWrapper.className = 'puzzle-wrapper';\n  puzzleWrapper.style.width = '600px';\n  puzzleWrapper.style.height = '600px';\n  puzzleWrapper.style.position = 'relative';\n\n  // Добавление элементов в контейнер\n  puzzleWrapper.append(puzzleContainer, message);\n  document.body.appendChild(puzzleWrapper);\n  var modal = document.getElementById('start-modal');\n  var startBtn = document.getElementById('start-game');\n  var customInput = document.getElementById('custom-image');\n  var difficultySelect = document.getElementById('difficulty');\n  var presets = document.querySelectorAll('.preset');\n  setupPuzzleControls({\n    customInput: customInput,\n    presets: presets,\n    difficultySelect: difficultySelect,\n    puzzleParams: puzzleParams,\n    instantUpdate: false\n  });\n\n  // Обработчик начала игры\n  startBtn.addEventListener('click', function () {\n    if (!puzzleParams.selectedImage) {\n      alert(\"Пожалуйста, выберите или загрузите изображение.\");\n      return;\n    }\n\n    // Пересоздаем пазл по текущей сложности и с выбранной картинкой\n    (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.createPuzzle)(puzzleContainer, puzzleParams, message);\n\n    // Устанавливаем фон кусочкам пазла\n    document.querySelectorAll('.puzzle-piece').forEach(function (piece) {\n      piece.style.backgroundImage = \"url(\\\"\".concat(puzzleParams.selectedImage, \"\\\")\");\n    });\n\n    // Перемешиваем пазл\n    (0,_puzzle_logic_js__WEBPACK_IMPORTED_MODULE_0__.placePieces)(puzzleContainer, puzzleParams);\n    modal.style.display = 'none';\n  });\n}\n\n//# sourceURL=webpack://frontend/./puzzle/index.js?");

/***/ }),

/***/ "./puzzle/puzzle-logic.js":
/*!********************************!*\
  !*** ./puzzle/puzzle-logic.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPuzzle: () => (/* binding */ createPuzzle),\n/* harmony export */   getPuzzleParts: () => (/* binding */ getPuzzleParts),\n/* harmony export */   placePieces: () => (/* binding */ placePieces)\n/* harmony export */ });\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * Генерирует базовые компоненты для пазла\r\n * @returns {Array} [params, container, message] - Параметры, контейнер и сообщение\r\n */\nfunction getPuzzleParts() {\n  // Параметры пазла по умолчанию\n  var puzzleParams = {\n    gridSize: 2,\n    // Размер сетки (2x2)\n    piecePositions: [],\n    // Позиции элементов\n    selectedImage: images + '/puzzle_test.png',\n    // Изображение по умолчанию\n    selectedPiece: null // Выбранный элемент\n  };\n  var puzzleContainer = createPuzzleContainer();\n  var message = createGameMessage();\n  return [puzzleParams, puzzleContainer, message];\n}\n\n/**\r\n * Создает пазл в указанном контейнере\r\n * @param {HTMLElement} puzzleContainer - Контейнер для элементов\r\n * @param {Object} puzzleParams - Параметры пазла\r\n * @param {HTMLElement} message - Элемент для отображения сообщений\r\n */\nfunction createPuzzle(puzzleContainer, puzzleParams, message) {\n  puzzleContainer.innerHTML = '';\n  // Перемешиваем позиции элементов пазла\n  puzzleParams.piecePositions = shuffle(_toConsumableArray(Array(puzzleParams.gridSize * puzzleParams.gridSize).keys()));\n\n  // Создание элементов пазла\n  var _loop = function _loop() {\n    var piece = document.createElement('div');\n    piece.classList.add('puzzle-piece');\n    piece.id = \"piece-\".concat(i + 1);\n    piece.setAttribute('data-index', i);\n\n    // Расчет размеров элемента\n    var percent = 100 / puzzleParams.gridSize;\n    piece.style.width = \"\".concat(percent, \"%\");\n    piece.style.height = \"\".concat(percent, \"%\");\n    piece.style.backgroundSize = \"\".concat(puzzleParams.gridSize * 100, \"% \").concat(puzzleParams.gridSize * 100, \"%\");\n\n    // Обработчик клика на элемент\n    piece.addEventListener('click', function () {\n      return handlePieceClick(puzzleContainer, puzzleParams, piece, message);\n    });\n    puzzleContainer.appendChild(piece);\n  };\n  for (var i = 0; i < puzzleParams.gridSize * puzzleParams.gridSize; i++) {\n    _loop();\n  }\n  placePieces(puzzleContainer, puzzleParams);\n}\n\n// Создание контейнера для пазлов\nfunction createPuzzleContainer() {\n  var container = document.createElement('div');\n  container.classList.add('puzzle-container');\n  var ids = '123456789'.split('');\n  ids.forEach(function (id, index) {\n    var piece = document.createElement('div');\n    piece.classList.add('puzzle-piece');\n    piece.id = \"piece-\".concat(id);\n    piece.setAttribute('draggable', 'true');\n    piece.setAttribute('data-index', id);\n    container.appendChild(piece);\n  });\n  return container;\n}\n\n/**\r\n * Располагает элементы пазла в соответствии с текущими позициями\r\n * @param {HTMLElement} puzzleContainer - Контейнер пазла\r\n * @param {Object} puzzleParams - Параметры пазла\r\n */\nfunction placePieces(puzzleContainer, puzzleParams) {\n  var pieces = puzzleContainer.querySelectorAll('.puzzle-piece');\n  var gridPositions = [];\n  var percent = 100 / puzzleParams.gridSize;\n\n  // Генерация сетки\n  for (var row = 0; row < puzzleParams.gridSize; row++) {\n    for (var col = 0; col < puzzleParams.gridSize; col++) {\n      gridPositions.push([col * percent, row * percent]);\n    }\n  }\n\n  // Распределение элементов по позициям\n  pieces.forEach(function (piece, idx) {\n    var _gridPositions$puzzle = _slicedToArray(gridPositions[puzzleParams.piecePositions[idx]], 2),\n      x = _gridPositions$puzzle[0],\n      y = _gridPositions$puzzle[1];\n    piece.style.left = \"\".concat(x, \"%\");\n    piece.style.top = \"\".concat(y, \"%\");\n\n    // Расчет позиции фона\n    var row = Math.floor(idx / puzzleParams.gridSize);\n    var col = idx % puzzleParams.gridSize;\n    piece.style.backgroundPosition = \"\".concat(col * -100, \"% \").concat(row * -100, \"%\");\n  });\n}\n\n/**\r\n * Алгоритм Фишера-Йетса для перемешивания массива\r\n * @param {Array} array - Исходный массив\r\n * @returns {Array} Перемешанный массив\r\n */\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n  return array;\n}\n\n/**\r\n * Обрабатывает клик на элементе пазла\r\n * @param {HTMLElement} puzzleContainer - Контейнер пазла\r\n * @param {Object} puzzleParams - Параметры пазла\r\n * @param {HTMLElement} piece - Выбранный элемент\r\n * @param {HTMLElement} message - Элемент сообщения\r\n */\nfunction handlePieceClick(puzzleContainer, puzzleParams, piece, message) {\n  if (!puzzleParams.selectedPiece) {\n    puzzleParams.selectedPiece = piece;\n    piece.style.outline = '2px solid red';\n  } else if (puzzleParams.selectedPiece === piece) {\n    piece.style.outline = '';\n    puzzleParams.selectedPiece = null;\n  } else {\n    swapPieces(puzzleContainer, puzzleParams, puzzleParams.selectedPiece, piece);\n    puzzleParams.selectedPiece.style.outline = '';\n    puzzleParams.selectedPiece = null;\n    checkVictory(puzzleParams, message);\n  }\n}\n\n// Перемещение элементов пазла\nfunction swapPieces(puzzleContainer, puzzleParams, p1, p2) {\n  var i1 = Array.from(document.querySelectorAll('.puzzle-piece')).indexOf(p1);\n  var i2 = Array.from(document.querySelectorAll('.puzzle-piece')).indexOf(p2);\n  var _ref2 = [puzzleParams.piecePositions[i2], puzzleParams.piecePositions[i1]];\n  puzzleParams.piecePositions[i1] = _ref2[0];\n  puzzleParams.piecePositions[i2] = _ref2[1];\n  placePieces(puzzleContainer, puzzleParams);\n}\n\n// Проверка условий победы\nfunction checkVictory(puzzleParams, message) {\n  var isVictory = puzzleParams.piecePositions.every(function (val, idx) {\n    return val === idx;\n  });\n  if (isVictory) {\n    message.style.display = 'block';\n  }\n}\n\n// Создание сообщение о победе\nfunction createGameMessage() {\n  var message = document.createElement('div');\n  message.id = 'game-message';\n  message.style.display = 'none';\n  message.style.textAlign = 'center';\n  message.style.fontSize = '1.5em';\n  message.style.marginTop = '20px';\n  message.textContent = 'Поздравляем! Вы собрали пазл!';\n  return message;\n}\n\n//# sourceURL=webpack://frontend/./puzzle/puzzle-logic.js?");

/***/ }),

/***/ "./whiteboard.js":
/*!***********************!*\
  !*** ./whiteboard.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _puzzle_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./puzzle/index.js */ \"./puzzle/index.js\");\n\n\n// Активация режима работы на интерактивной доске\n_puzzle_index_js__WEBPACK_IMPORTED_MODULE_0__.puzzleParams.onWhiteboard = true;\n\n// Получение ссылок на элементы canvas\nvar imageCanvas = document.getElementById('image-layer');\nvar drawCanvas = document.getElementById('draw-layer');\n\n// Контексты рисования\nvar imageCtx = imageCanvas.getContext('2d');\nvar drawCtx = drawCanvas.getContext('2d');\n\n// Состояние приложения\nvar drawing = false; // Флаг процесса рисования\nvar prev = {}; // Предыдущие координаты курсора\nvar imagesList = []; // Список загруженных изображений\nvar activeImage = null; // Активное изображение для перемещения\nvar dragOffset = {\n  x: 0,\n  y: 0\n}; // Смещение при перетаскивании\nvar isResizing = false; // Флаг изменения размера\nvar isDragging = false; // Флаг перетаскивания\nvar currentTool = 'pen'; // Текущий инструмент\nvar currentLineWidth = 2; // Толщина линии\nvar currentColor = '#000000'; // Цвет по умолчанию\n\n// Инициализация WebSocket соединения\nvar ws = new WebSocket(\"ws://\".concat(window.location.host, \"/ws/whiteboard/\"));\n\n// Обработчик входящих сообщений\nws.onmessage = function (e) {\n  var data = JSON.parse(e.data);\n\n  // Обработка рисования\n  if (data.type === \"draw\") {\n    var x0 = data.x0,\n      y0 = data.y0,\n      x1 = data.x1,\n      y1 = data.y1,\n      color = data.color,\n      lineWidth = data.lineWidth;\n    drawLine(drawCtx, x0, y0, x1, y1, color, lineWidth);\n  }\n\n  // Обработка загрузки изображений\n  if (data.type === 'image') {\n    var img = new Image();\n    img.onload = function () {\n      var imageObj = {\n        img: img,\n        x: 50,\n        y: 50,\n        width: 200,\n        height: 200\n      };\n      imagesList.push(imageObj);\n      redrawImages();\n    };\n    img.src = data.dataURL;\n  }\n\n  // Обработка очистки доски\n  if (data.type === 'clear') {\n    drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);\n    imageCtx.clearRect(0, 0, imageCanvas.width, imageCanvas.height);\n    imagesList = [];\n  }\n};\n\n// Инициализация инструментов\ndocument.getElementById('pen_btn').addEventListener('click', function () {\n  currentTool = 'pen';\n  toggleToolButtons('pen_btn');\n});\ndocument.getElementById('eraser_btn').addEventListener('click', function () {\n  currentTool = 'eraser';\n  toggleToolButtons('eraser_btn');\n});\n\n// Обработчики параметров рисования\ndocument.getElementById('colorPicker').addEventListener('input', function (e) {\n  currentColor = e.target.value;\n});\ndocument.getElementById('thickness').addEventListener('input', function (e) {\n  currentLineWidth = parseInt(e.target.value);\n});\n\n/**\r\n * Управляет визуальной активностью кнопок инструментов.\r\n * Убирает класс 'active' со всех кнопок и добавляет его выбранной кнопке.\r\n * @param {string} activeId - ID активной кнопки инструмента\r\n */\nfunction toggleToolButtons(activeId) {\n  document.querySelectorAll('.tool').forEach(function (btn) {\n    return btn.classList.remove('active');\n  });\n  document.getElementById(activeId).classList.add('active');\n}\n\n// Обработчики событий мыши\ndrawCanvas.addEventListener('mousedown', function (e) {\n  var x = e.offsetX,\n    y = e.offsetY;\n  activeImage = getImageAt(x, y);\n  if (activeImage) {\n    if (overResizeHandle(x, y, activeImage)) {\n      isResizing = true;\n    } else {\n      isDragging = true;\n      dragOffset.x = x - activeImage.x;\n      dragOffset.y = y - activeImage.y;\n    }\n  } else {\n    drawing = true;\n    prev = {\n      x: x,\n      y: y\n    };\n  }\n});\ndrawCanvas.addEventListener('mouseup', function () {\n  drawing = false;\n  isDragging = false;\n  isResizing = false;\n  activeImage = null;\n});\ndrawCanvas.addEventListener('mousemove', function (e) {\n  var x = e.offsetX,\n    y = e.offsetY;\n  if (drawing && !someonesDragging) {\n    var current = {\n      x: x,\n      y: y\n    };\n    var color = currentTool === 'pen' ? currentColor : '#ffffff';\n    var message = {\n      type: 'draw',\n      x0: prev.x,\n      y0: prev.y,\n      x1: current.x,\n      y1: current.y,\n      color: color,\n      lineWidth: currentLineWidth\n    };\n    ws.send(JSON.stringify(message));\n    drawLine(drawCtx, prev.x, prev.y, current.x, current.y, color, currentLineWidth);\n    prev = current;\n  } else if (isDragging && activeImage) {\n    activeImage.x = x - dragOffset.x;\n    activeImage.y = y - dragOffset.y;\n    redrawImages();\n  } else if (isResizing && activeImage) {\n    activeImage.width = x - activeImage.x;\n    activeImage.height = y - activeImage.y;\n    redrawImages();\n  }\n});\n\n/**\r\n * Рисует линию на заданном контексте.\r\n * @param {CanvasRenderingContext2D} ctx - Контекст рисования\r\n * @param {number} x0 - Начальная координата X\r\n * @param {number} y0 - Начальная координата Y\r\n * @param {number} x1 - Конечная координата X\r\n * @param {number} y1 - Конечная координата Y\r\n * @param {string} color - Цвет линии\r\n * @param {number} lineWidth - Толщина линии\r\n */\nfunction drawLine(ctx, x0, y0, x1, y1, color, lineWidth) {\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.lineCap = 'round';\n  ctx.lineJoin = 'round';\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.stroke();\n}\n\n// Загрузка пользовательских изображений\ndocument.getElementById('img-upload').addEventListener('change', function () {\n  var file = this.files[0];\n  if (!file) return;\n  var reader = new FileReader();\n  reader.onload = function () {\n    var dataURL = reader.result;\n    ws.send(JSON.stringify({\n      type: 'image',\n      dataURL: dataURL\n    }));\n  };\n  reader.readAsDataURL(file);\n});\n\n/**\r\n * Очищает доску и сбрасывает загруженные изображения.\r\n */\nfunction clearBoard() {\n  ws.send(JSON.stringify({\n    type: 'clear'\n  }));\n  document.getElementById('img-upload').value = '';\n}\ndocument.querySelector(\"#clear_btn\").addEventListener(\"click\", function () {\n  clearBoard();\n});\n\n/**\r\n * Перерисовывает все изображения на слое изображений и отображает маркеры изменения размера.\r\n */\nfunction redrawImages() {\n  imageCtx.clearRect(0, 0, imageCanvas.width, imageCanvas.height);\n  imagesList.forEach(function (imgObj) {\n    imageCtx.drawImage(imgObj.img, imgObj.x, imgObj.y, imgObj.width, imgObj.height);\n    drawResizeHandle(imageCtx, imgObj);\n  });\n}\n\n// Вспомогательные функции\nfunction getImageAt(x, y) {\n  for (var i = imagesList.length - 1; i >= 0; i--) {\n    var img = imagesList[i];\n    if (x >= img.x && x <= img.x + img.width && y >= img.y && y <= img.y + img.height) {\n      return img;\n    }\n  }\n  return null;\n}\nfunction drawResizeHandle(ctx, imgObj) {\n  var size = 10;\n  ctx.fillStyle = '#00f';\n  ctx.fillRect(imgObj.x + imgObj.width - size, imgObj.y + imgObj.height - size, size, size);\n}\nfunction overResizeHandle(x, y, imgObj) {\n  var size = 10;\n  return x >= imgObj.x + imgObj.width - size && x <= imgObj.x + imgObj.width && y >= imgObj.y + imgObj.height - size && y <= imgObj.y + imgObj.height;\n}\n\n/**\r\n * Адаптирует размер холста (canvas) под размеры родительского контейнера.\r\n */\nfunction resizeCanvasToDisplaySize() {\n  var wrapper = imageCanvas.parentElement;\n  var width = wrapper.clientWidth;\n  var height = wrapper.clientHeight;\n  imageCanvas.width = width;\n  imageCanvas.height = height;\n  drawCanvas.width = width;\n  drawCanvas.height = height;\n  redrawImages();\n}\nwindow.addEventListener('load', resizeCanvasToDisplaySize);\nwindow.addEventListener('resize', resizeCanvasToDisplaySize);\n\n// Инициализация меню игр\nvar dropdown = document.getElementById(\"game-menu\");\nvar gamesBtn = document.getElementById(\"games_btn\");\nvar gameMenu = document.getElementById(\"game-menu\");\ngamesBtn.addEventListener(\"click\", function () {\n  updategameMenuPos();\n  dropdown.classList.toggle(\"show\");\n});\nwindow.addEventListener(\"resize\", function () {\n  updategameMenuPos();\n});\n\n/**\r\n * Обновляет позицию выпадающего меню игр относительно кнопки.\r\n */\nfunction updategameMenuPos() {\n  var rect = gamesBtn.getBoundingClientRect();\n  gameMenu.style.top = \"\".concat(rect.bottom + window.scrollY, \"px\");\n  gameMenu.style.left = \"\".concat(rect.left + window.scrollX, \"px\");\n}\nwindow.addEventListener(\"click\", function (e) {\n  if (!gamesBtn.contains(e.target) && !dropdown.contains(e.target)) {\n    dropdown.classList.remove(\"show\");\n  }\n});\ndocument.querySelectorAll(\".game-option\").forEach(function (option) {\n  option.addEventListener(\"click\", function () {\n    var gameName = option.dataset.name;\n    var gameWrapper = addGamePasteGame();\n    gameWrapper.dataset.gameName = gameName;\n    updateGameSettings(gameName);\n    if (gameName === \"puzzles\") {\n      (0,_puzzle_index_js__WEBPACK_IMPORTED_MODULE_0__.createPuzzleOnBoard)(gameWrapper);\n    }\n    dropdown.classList.remove(\"show\");\n  });\n});\n\n/**\r\n * Создает и добавляет контейнер для вставляемой игры на доску.\r\n * @returns {HTMLDivElement} gameWrapper - созданный контейнер игры\r\n */\nfunction addGamePasteGame() {\n  var gameWrapper = document.createElement('div');\n  gameWrapper.className = 'paste-game-wrapper';\n  gameWrapper.style.left = '100px';\n  gameWrapper.style.top = '100px';\n  gameWrapper.style.width = '400px';\n  gameWrapper.style.height = '300px';\n  gameWrapper.style.aspectRatio = '4 / 3';\n  var closeBtn = document.createElement('button');\n  closeBtn.className = 'paste-game-close';\n  closeBtn.textContent = '×';\n  closeBtn.onclick = function () {\n    clearDynamicSettings();\n    gameWrapper.remove();\n  };\n  gameWrapper.appendChild(closeBtn);\n  document.querySelector('.canvas-wrapper').appendChild(gameWrapper);\n  makeDraggable(gameWrapper);\n  makeResizable(gameWrapper);\n  gameWrapper.addEventListener('click', function (e) {\n    if (!e.target.closest('.paste-game-close') && !e.target.classList.contains('resize-handle')) {\n      var gameName = gameWrapper.dataset.gameName;\n\n      // Сбрасываем флаг для всех остальных gameWrapper\n      document.querySelectorAll('.paste-game-wrapper').forEach(function (wrapper) {\n        if (wrapper !== gameWrapper) {\n          wrapper.dataset.settingsUpdated = 'false'; // Сбрасываем флаг для других игр\n        }\n      });\n\n      // Проверка, был ли уже обновлен набор настроек для этой игры\n      if (gameName && gameWrapper.dataset.settingsUpdated !== 'true') {\n        updateGameSettings(gameName);\n        gameWrapper.dataset.settingsUpdated = 'true'; // Устанавливаем флаг, что настройки обновлены\n      }\n      document.querySelectorAll('.paste-game-wrapper').forEach(function (wrapper) {\n        wrapper.classList.remove('active-game');\n      });\n      gameWrapper.classList.add('active-game');\n    }\n  });\n  return gameWrapper;\n}\nvar someonesDragging = false;\n\n/**\r\n * Делает контейнер игры перетаскиваемым.\r\n * @param {HTMLDivElement} gameWrapper - Контейнер игры\r\n */\nfunction makeDraggable(gameWrapper) {\n  gameWrapper.isDragging = false;\n  gameWrapper.offsetX = 0;\n  gameWrapper.offsetY = 0;\n  gameWrapper.addEventListener('mousedown', function (e) {\n    if (e.target.closest('.paste-game-close')) return;\n    gameWrapper.isDragging = true;\n    someonesDragging = true;\n    var rect = gameWrapper.getBoundingClientRect();\n    var x = e.x,\n      y = e.y;\n    console.log(rect.left, rect.top);\n    gameWrapper.offsetX = x - rect.left;\n    gameWrapper.offsetY = y - rect.top;\n    gameWrapper.style.zIndex = 999;\n    document.body.style.userSelect = 'none';\n  });\n  document.addEventListener('mousemove', function (e) {\n    if (!gameWrapper.isDragging) return;\n    gameWrapper.style.left = \"\".concat(e.clientX - gameWrapper.offsetX - 100, \"px\");\n    gameWrapper.style.top = \"\".concat(e.clientY - gameWrapper.offsetY - 180, \"px\");\n  });\n  document.addEventListener('mouseup', function () {\n    if (gameWrapper.isDragging) {\n      gameWrapper.isDragging = false;\n      someonesDragging = false;\n      document.body.style.userSelect = '';\n    }\n  });\n}\n\n/**\r\n * Делает контейнер игры изменяемым по размеру.\r\n * @param {HTMLDivElement} gameWrapper - Контейнер игры\r\n */\nfunction makeResizable(gameWrapper) {\n  var resizeHandle = document.createElement('div');\n  resizeHandle.className = 'resize-handle';\n  gameWrapper.appendChild(resizeHandle);\n  gameWrapper.isResizing = false;\n  var startX, startY, startWidth, startHeight;\n  resizeHandle.addEventListener('mousedown', function (e) {\n    e.stopPropagation(); // чтобы drag и resize не конфликтовали\n    gameWrapper.isResizing = true;\n    someonesDragging = true;\n    var rect = gameWrapper.getBoundingClientRect();\n    startX = e.clientX;\n    startY = e.clientY;\n    startWidth = rect.width;\n    startHeight = rect.height;\n    document.body.style.userSelect = 'none';\n  });\n  document.addEventListener('mousemove', function (e) {\n    if (!gameWrapper.isResizing) return;\n    var dx = e.clientX - startX;\n    var dy = e.clientY - startY;\n    var newWidth = Math.max(200, startWidth + dx);\n    var newHeight = Math.max(150, startHeight + dy);\n    gameWrapper.style.width = \"\".concat(newWidth, \"px\");\n    gameWrapper.style.height = \"\".concat(newHeight, \"px\");\n  });\n  document.addEventListener('mouseup', function () {\n    if (gameWrapper.isResizing) {\n      gameWrapper.isResizing = false;\n      someonesDragging = false;\n      document.body.style.userSelect = '';\n    }\n  });\n}\n\n// Панель настроек\nvar toggleButton = document.getElementById('toggle-settings-btn');\nvar settingsPanel = document.querySelector('.settings-panel');\n\n// Открытие/Скрытие настроек\ntoggleButton.addEventListener('click', function () {\n  settingsPanel.classList.toggle('hidden');\n  if (settingsPanel.classList.contains('hidden')) {\n    toggleButton.textContent = 'Открыть настройки';\n  } else {\n    toggleButton.textContent = 'Закрыть настройки';\n  }\n});\n\n/**\r\n * Удаляет все динамически созданные элементы настроек игр.\r\n */\nfunction clearDynamicSettings() {\n  var dynamicElements = settingsPanel.querySelectorAll('.dynamic-setting');\n  dynamicElements.forEach(function (el) {\n    return el.remove();\n  });\n}\n\n/**\r\n * Обновляет панель настроек в зависимости от выбранной игры.\r\n * @param {string} gameName - Название выбранной игры\r\n */\nfunction updateGameSettings(gameName) {\n  clearDynamicSettings();\n  if (gameName === \"puzzles\") {\n    // Очищаем существующие настройки для пазлов, если они были добавлены ранее\n    var existingSettings = document.querySelector('.puzzle-settings-container');\n    if (existingSettings) {\n      existingSettings.remove();\n    }\n    var settingsContainer = document.createElement('div');\n    settingsContainer.className = \"dynamic-setting puzzle-settings-container\"; // Контейнер для настроек пазлов\n\n    // Содержимое для выбора изображения и сложности\n    var content = \"\\n            <div class=\\\"modal-content\\\">\\n                <h2>\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043F\\u0430\\u0437\\u043B\\u0430</h2>\\n\\n                <div class=\\\"preset-images\\\">\\n                    <img src=\\\"\".concat(images, \"/puzzle_test.png\\\" class=\\\"preset\\\" data-src=\\\"\").concat(images, \"/puzzle_test.png\\\">\\n                    <img src=\\\"\").concat(images, \"/masha-i-medvedi.png\\\" class=\\\"preset\\\" data-src=\\\"\").concat(images, \"/masha-i-medvedi.png\\\">\\n                </div>\\n\\n                <label class=\\\"upload-label\\\">\\n                    \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0441\\u0432\\u043E\\u0451:\\n                    <input type=\\\"file\\\" id=\\\"custom-image\\\" accept=\\\"image/*\\\">\\n                </label>\\n\\n                <label for=\\\"difficulty\\\">\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0441\\u043B\\u043E\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C:</label>\\n                <select id=\\\"difficulty\\\">\\n                    <option value=\\\"2\\\" selected>2x2</option>\\n                    <option value=\\\"3\\\">3x3</option>\\n                    <option value=\\\"4\\\">4x4</option>\\n                </select>\\n\\n                <button id=\\\"start-game\\\">\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443</button>\\n            </div>\\n        \");\n\n    // Вставляем содержимое в контейнер\n    settingsContainer.innerHTML = content;\n\n    // Добавляем в панель настроек\n    settingsPanel.appendChild(settingsContainer);\n  } else if (gameName === \"another-game\") {}\n}\n\n//# sourceURL=webpack://frontend/./whiteboard.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./whiteboard.js");
/******/ 	
/******/ })()
;